{"id":"ejercicios/generators.html","dependencies":[{"name":"C:\\Users\\Alejandro\\Documents\\Platzi\\curso-profesional-javascript\\javascript-profesional\\package.json","includedInParent":true,"mtime":1646408314134}],"generated":{"html":"<html>\r\n    <head>\r\n    <title>Generators</title>\r\n    </head>\r\n\r\n    <body>\r\n        <a href=\"/ejercicios/\">Go back</a>\r\n        <p><em>Abre la consola</em></p>\r\n\r\n    <script>// Los generadores son funciones de las que se puede salir y volver a entrar.\n// Su contexto (asociación de variables) será conservado entre las reentradas.\n// Cada vez que llamamos next, la ejecución del generador va a continuar hasta el proximo yield\nfunction* simpleGenerator() {\n  console.log(\"GENERATOR START\");\n  yield;\n  console.log(\"GENERATOR END\");\n} // Podemos hacer generadores infinitos.\n\n\nfunction* idMaker() {\n  let id = 1;\n\n  while (true) {\n    yield id;\n    id += 1;\n  }\n} // Cuando llamamos next también podemos pasar valores que la función recibe.\n\n\nfunction* idMakerWithReset() {\n  let id = 1;\n  let reset;\n\n  while (true) {\n    reset = yield id;\n\n    if (typeof reset === \"number\") {\n      id = reset;\n    } else {\n      id += 1;\n    }\n  }\n} // Ahora hagamos un ejemplo un poco más complejo: la secuencia fibonacci\n\n\nfunction* fibonacci() {\n  let a = 0;\n  let b = 1;\n\n  while (true) {\n    const c = a + b;\n    yield a;\n    a = b;\n    b = c;\n  }\n}</script>\r\n    </body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"3d9278bd90998eddec798ec79cbb39e5","cacheData":{"env":{}}}