{"id":"ejercicios/prototype.html","dependencies":[{"name":"C:\\Users\\Alejandro\\Documents\\Platzi\\curso-profesional-javascript\\javascript-profesional\\package.json","includedInParent":true,"mtime":1646408314134}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Prototype</title>\r\n</head>\r\n<body>\r\n    \r\n\r\n    <script>// Un objeto comun y corriente\n// const zelda = {\n//     name: \"Zelda\"\n// }\n// zelda.saludar = function(){\n//     console.log(`Hola, me llamo ${this.name}`)\n// }\n// zelda.saludar()\n// const link = {\n//     name: \"Link\"\n// }\n// link.saludar = function(){\n//     console.log(`Hola, me llamo ${this.name}`)\n// }\n// link.saludar()\n// Seamos m√°s eficientes\n// function Hero(name){\n//     const hero = {\n//         name: name,\n//     }\n//     hero.saludar = function(){\n//     console.log(`Hola, me llamo ${this.name}`)\n//     }\n//     return hero\n// }\n// const zelda = Hero(\"Zelda\")\n// zelda.saludar()\n// const link = Hero(\"Link\")\n// link.saludar()\n// Ahora evitemos crear la funcion cada vez que instanciemos un objeto nuevo\n// const heroMethods ={\n//     saludar : function(){\n//     console.log(`Hola, mi nombre es ${this.name}`)\n//     }\n// } \n// function Hero(name){\n//     const hero = {\n//         name: name,\n//     }\n//     hero.saludar = heroMethods.saludar\n//     return hero\n// }\n// const zelda = Hero(\"Zelda\")\n// zelda.saludar()\n// const link = Hero(\"Link\")\n// link.saludar()\n// Object create\n// const heroMethods ={\n//     saludar : function(){\n//     console.log(`Hola! mi nombre es ${this.name} ;D`)\n//     }\n// } \n// function Hero(name){\n//     const hero = Object.create(heroMethods)\n//     hero.name = name\n//     hero.saludar = heroMethods.saludar\n//     return hero\n// }\n// const zelda = Hero(\"Zelda\")\n// zelda.saludar()\n// const link = Hero(\"Link\")\n// link.saludar()\n// PROTOTYPE\n// function Hero(name){\n//     const hero = Object.create(Hero.prototype)\n//     hero.name = name\n//     return hero\n// }\n// Hero.prototype.saludar = function(){\n//     console.log(`Hola! llamame ${this.name} ;D`)\n//     }\n// const zelda = Hero(\"Zelda\")\n// zelda.saludar()\n// const link = Hero(\"Link\")\n// link.saludar()\n// \n// USANDO new para crear objetos,esto hace que herede las propiedad que estan el prototype del objeto \"padre\"\nfunction Hero(name) {\n  // const hero = Object.create(Hero.prototype)   / Al instanciar con NEW esto ocurre de forma automatica\n  this.name = name; // return hero                                  / Al instanciar con NEW esto ocurre de forma automatica\n}\n\nHero.prototype.saludar = function () {\n  console.log(`Hey! llamame ${this.name} ;D`);\n};\n\nconst zelda = new Hero(\"Zelda\");\nzelda.saludar();\nconst link = new Hero(\"Link\");\nlink.saludar();</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"2721ca4b0f7696f071a144bda41bede4","cacheData":{"env":{}}}